{"version":3,"sources":["DataLoader/DataLoader.js","DataViewer/KeyValueHolder.js","DataViewer/Jackson.js","DataViewer/DataViewer.js","Controls/Control.js","Provider/JsonProvider.js","App.js","serviceWorker.js","index.js"],"names":["DataLoader","MyContext","Consumer","context","className","style","display","state","inputMode","value","json","onChange","e","updateJson","onClick","clear","formatJson","removeWhiteSpacesJson","Component","KeyValueHolder","dummy","document","createElement","body","appendChild","select","execCommand","removeChild","this","props","key","name","detect","closeOnClick","timeOut","offsetX","offsetY","copy","class","undefined","JSON","stringify","Jackson","visible","toggleVisibility","setState","constructor","Object","Array","Boolean","Number","entries","map","init","DataViewer","jsonInViewer","Controls","id","viewJson","goToInputMode","JsonProvider","target","parse","err","alert","Provider","children","React","createContext","App","Control","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f4f726b4.chunk.js","sourcesContent":["import React, { Fragment, Component } from 'react';\nimport './DataLoader.css';\nimport { MyContext } from '../App';\n\nclass DataLoader extends Component {\n  render() {\n    return (\n      <MyContext.Consumer>\n        {context => (\n          <Fragment>\n            <div\n              className='row'\n              style={{ display: context.state.inputMode ? 'block' : 'none' }}\n            >\n              <form className='col s12'>\n                <textarea\n                  className='card-panel'\n                  value={context.state.json}\n                  onChange={e => context.updateJson(e)}\n                />\n              </form>\n              <div className='col s12 right-align'>\n                <a\n                  className='waves-effect waves-light btn-small teal lighten-2'\n                  onClick={context.clear}\n                >\n                  Clear\n                </a>\n                <a\n                  className='waves-effect waves-light btn-small teal lighten-2'\n                  onClick={context.formatJson}\n                >\n                  Format Json\n                </a>\n                <a\n                  className='waves-effect waves-light btn-small teal lighten-2'\n                  onClick={context.removeWhiteSpacesJson}\n                >\n                  Remove White Spaces\n                </a>\n              </div>\n            </div>\n          </Fragment>\n        )}\n      </MyContext.Consumer>\n    );\n  }\n}\n\nexport default DataLoader;\n","import React, { Component, Fragment } from 'react';\nimport { ToolTipController, Select } from 'react-tooltip-controller';\n\nclass KeyValueHolder extends Component {\n  copy(value) {\n    let dummy = document.createElement('textarea');\n    // to avoid breaking orgain page when copying more words\n    // cant copy when adding below this code\n    // dummy.style.display = 'none'\n    document.body.appendChild(dummy);\n    //Be careful if you use texarea. setAttribute('value', value), which works with \"input\" does not work with \"textarea\".\n    dummy.value = value;\n    dummy.select();\n    document.execCommand('copy');\n    document.body.removeChild(dummy);\n  }\n  render() {\n    let value = this.props.value;\n    const key = this.props.name;\n    return (\n      <Fragment>\n        {' '}\n        <ToolTipController\n          detect='click'\n          closeOnClick={false}\n          timeOut={1000}\n          offsetX='centre'\n          offsetY={-40}\n        >\n          <Select>\n            <a className='text' onClick={() => this.copy(key)}>\n              {key}\n            </a>\n          </Select>\n          <span class='tooltiptext'>Copied</span>\n        </ToolTipController>\n        {value !== undefined ? (\n          <Fragment>\n            <span>{` : `}</span>\n            <ToolTipController\n              detect='click'\n              closeOnClick={false}\n              timeOut={1000}\n              offsetX='centre'\n              offsetY={-40}\n            >\n              <Select>\n                <a\n                  className='text'\n                  onClick={() => this.copy(JSON.stringify(value))}\n                >\n                  {JSON.stringify(value)}\n                </a>\n              </Select>\n              <span class='tooltiptext'>Copied</span>\n            </ToolTipController>\n          </Fragment>\n        ) : null}\n      </Fragment>\n    );\n  }\n}\n\nexport default KeyValueHolder;\n","import React, { Component } from 'react';\nimport KeyValueHolder from './KeyValueHolder';\nimport './DataViewer.css';\n\nclass Jackson extends Component {\n  state = { visible: false };\n\n  toggleVisibility = () => this.setState({ visible: !this.state.visible });\n\n  init() {\n    let value = this.props.value;\n    const key = this.props.name;\n    if (key) {\n      if (\n        value &&\n        (value.constructor === Object || value.constructor === Array)\n      ) {\n        return (\n          <div key={key} className='child'>\n            <a\n              className={\n                this.state.visible\n                  ? 'mdi mdi-minus-box-outline mdi-24px box'\n                  : 'mdi mdi-plus-box-outline mdi-24px box'\n              }\n              onClick={this.toggleVisibility}\n            ></a>\n            <span\n              className={\n                value.constructor === Array\n                  ? 'mdi mdi-code-brackets mdi-24px brackets'\n                  : 'mdi mdi-code-braces mdi-24px brackets'\n              }\n            ></span>\n            <KeyValueHolder name={key}></KeyValueHolder>\n            {this.state.visible ? (\n              <div className='expanded'>\n                {Object.entries(this.props.value).map(([key, value]) => (\n                  <Jackson key={key} name={key} value={value} />\n                ))}\n              </div>\n            ) : null}\n          </div>\n        );\n      } else {\n        return (\n          <div key={key} className='child'>\n            <a\n              className={\n                (value || value === false || value === ''\n                  ? value.constructor === Boolean\n                    ? 'boolean'\n                    : value.constructor === Number\n                    ? 'number'\n                    : 'string'\n                  : 'null') + ' mdi mdi-checkbox-blank simple'\n              }\n            ></a>\n            <KeyValueHolder name={key} value={value}></KeyValueHolder>\n          </div>\n        );\n      }\n    }\n  }\n\n  render() {\n    return <div className='jackson'>{this.init()}</div>;\n  }\n}\n\nexport default Jackson;\n","import React, { Component } from 'react';\nimport { MyContext } from '../App';\nimport Jackson from './Jackson';\n\nclass DataViewer extends Component {\n  render() {\n    return (\n      <MyContext.Consumer>\n        {context => (\n          <div\n            className='row viewerMargin'\n            style={{ display: !context.state.inputMode ? 'block' : 'none' }}\n          >\n            <div className='col s12'>\n              <div className='card-panel'>\n                <Jackson name='JSON' value={context.state.jsonInViewer} />\n              </div>\n            </div>\n          </div>\n        )}\n      </MyContext.Consumer>\n    );\n  }\n}\n\nexport default DataViewer;\n","import React, { Fragment, Component } from 'react';\nimport { MyContext } from '../App';\n\nclass Controls extends Component {\n  render() {\n    return (\n      <MyContext.Consumer>\n        {context => (\n          <nav>\n            <div className='nav-wrapper teal lighten-2'>\n              <a className='brand-logo right json-viewer-logo hide-on-small-only'>\n                Json Viewer\n              </a>\n              <ul id='nav-mobile' className='left hide-on-small-only'>\n                <li>\n                  <a onClick={context.viewJson}>Viewer</a>\n                </li>\n                <li>\n                  <a onClick={context.goToInputMode}>Data</a>\n                </li>\n              </ul>\n              <ul id='nav-mobile' className='left hide-on-med-and-up'>\n                <li>\n                  <a onClick={context.viewJson} className='mdi mdi-json'></a>\n                </li>\n                <li>\n                  <a\n                    onClick={context.goToInputMode}\n                    className='mdi mdi-textbox'\n                  ></a>\n                </li>\n              </ul>\n            </div>\n          </nav>\n        )}\n      </MyContext.Consumer>\n    );\n  }\n}\n\nexport default Controls;\n","import React, { Component } from 'react';\nimport { MyContext } from '../App';\n\nclass JsonProvider extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      inputMode: true,\n      json: `{\"someDummyJson\":[{\"course\":472970619.69472694,\"river\":-1970074456.5413733,\"cow\":{\"big\":null,\"big2\":\"\",\"big3\":123}},true,\"exactly\"],\"nearer\":\"signal\",\"has\":true}`\n    };\n\n    this.updateJson = e => {\n      this.setState({\n        json: e.target.value\n      });\n    };\n\n    this.formatJson = () => {\n      try {\n        this.setState({\n          json: JSON.stringify(JSON.parse(this.state.json), null, 2)\n        });\n      } catch (err) {\n        alert('Invalid JSON');\n      }\n    };\n\n    this.removeWhiteSpacesJson = () => {\n      try {\n        this.setState({\n          json: JSON.stringify(JSON.parse(this.state.json))\n        });\n      } catch (err) {\n        alert('Invalid JSON');\n      }\n    };\n\n    this.clear = () => {\n      this.setState({\n        ...this.state,\n        json: ''\n      });\n    };\n\n    this.goToInputMode = () => {\n      this.setState({\n        ...this.state,\n        inputMode: true\n      });\n    };\n\n    this.viewJson = () => {\n      try {\n        this.setState({\n          ...this.state,\n          jsonInViewer: JSON.parse(this.state.json),\n          inputMode: false\n        });\n      } catch (err) {\n        alert('Invalid JSON');\n      }\n    };\n  }\n\n  render() {\n    return (\n      <MyContext.Provider\n        value={{\n          state: this.state,\n          updateJson: this.updateJson,\n          formatJson: this.formatJson,\n          removeWhiteSpacesJson: this.removeWhiteSpacesJson,\n          viewJson: this.viewJson,\n          goToInputMode: this.goToInputMode,\n          clear: this.clear\n        }}\n      >\n        {this.props.children}\n      </MyContext.Provider>\n    );\n  }\n}\n\nexport default JsonProvider;\n","import React, { Component } from 'react';\nimport './App.css';\nimport DataLoader from './DataLoader/DataLoader';\nimport DataViewer from './DataViewer/DataViewer';\nimport Controls from './Controls/Control';\nimport JsonProvider from './Provider/JsonProvider';\n\nexport const MyContext = React.createContext();\n\nclass App extends Component {\n  render() {\n    return (\n      <JsonProvider>\n        <div className='row container'>\n          <div className='col s12'>\n            <Controls />\n          </div>\n          <div className='col s12'>\n            <DataViewer />\n          </div>\n          <div className='col s12'>\n            <DataLoader />\n          </div>\n        </div>\n      </JsonProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}